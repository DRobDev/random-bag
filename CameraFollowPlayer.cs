using UnityEngine;
using System.Collections;

//---------------------------------------------------
// Move the camera position along the x axis to follow the active player generated by 'base player'
//---------------------------------------------------

public class CameraFollowPlayer : MonoBehaviour
{
    public GameObject BasePlayer; //base object for player
    public GameObject[] PrefabTypesToLookForInsideBasePlayer; //priority listing

    public GameObject CurrentTarget; //current target for the camera to follow

    // Use this for initialization
    void Start()
    {
        StartCoroutine(SlowUpdate());
    }

    private float _velocity;

    // called every frame
    void FixedUpdate()
    {
        if(CurrentTarget == null) return; //keep position if no target exists

        Vector3 CurrentPosition = transform.position;       //smoothly move camera 'x'position to player 'x'position
        CurrentPosition.x = Mathf.SmoothDamp(CurrentPosition.x, CurrentTarget.transform.position.x, ref _velocity, .5f);
        transform.position = CurrentPosition;
    }

    // called five times a second
    IEnumerator SlowUpdate()
    {
        while (true)
        {
            if (CurrentTarget == null)
            {
                FindTarget();                   //Find only gets called five time a second as it's a bit heavy and shouldn't be called every frame
            }
            yield return new WaitForSeconds(.2f);
        }
    }

    void FindTarget()
    {
        Transform[] children = BasePlayer.GetComponentsInChildren<Transform>();
        bool playerFound = false; //used to end the foreach if player has been found
        foreach (Transform child in children)                                         //for each child of the 'base player'
        {
            if (child.position.y < -500) continue;

            foreach (GameObject player in PrefabTypesToLookForInsideBasePlayer)       //check to see if child matches a 'player type' that we are looking for
            {
                if(child.gameObject.name == player.gameObject.name + "(Clone)" || child.gameObject.name == player.gameObject.name)
                {
                    CurrentTarget = child.gameObject;                                 //set it to current target if it does
                    playerFound = true;
                    break;
                }
            }
            if (playerFound) break;
        }
    }
}
